trigger:
  - master

pool:
  name: Azure Pipelines
  demands: java
  vmImage: windows-2019

#Your build pipeline references an undefined variable named ‘json.versionnumber’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references an undefined variable named ‘json.versionnumber’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972

steps:
  - powershell: |
      if ("$(Build.SourceBranchName)" -eq "master")
      {
        Write-Host 'branch is - "$(Build.SourceBranchName)"'
      "##vso[task.setvariable variable=apiendpoint;]http://mydomainis.com/v1/api/reset_test"
      }
      else
      {
         Write-Host "i am not in master branch!!"
      }
    displayName: "PowerShell Script"
    condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))

  - task: SonarSource.sonarqube.15B84CA1-B62F-4A2A-A403-89B77A063157.SonarQubePrepare@4
    condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'dev'))
    displayName: "Prepare analysis on SonarQube"
    inputs:
      SonarQube: newagent
      scannerMode: CLI

  - task: SonarSource.sonarqube.6D01813A-9589-4B15-8491-8164AEB38055.SonarQubeAnalyze@4
    displayName: "Run Code Analysis"
    condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'dev'))

  - task: OneLuckiDev.json2variable.vsts-json-to-variable.oneLuckiDevJson2Variable@1
    displayName: "JSON to Variable"
    inputs:
      jsonFile: version.json
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))

  - task: CopyFiles@2
    displayName: "Copy Files to: $(Build.ArtifactStagingDirectory)/$(Build.Repository.Name)"
    inputs:
      SourceFolder: "$(Build.Repository.LocalPath)"
      Contents: |
        **
        !.git/**/*
        !.sonar/**/*
        !Exclusion_List.txt
        !README.md
      TargetFolder: "$(Build.ArtifactStagingDirectory)/$(Build.Repository.Name)"
      CleanTargetFolder: true
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))

  - task: ArchiveFiles@2
    displayName: "$(Build.Repository.LocalPath)"
    inputs:
      rootFolderOrFile: "$(Build.ArtifactStagingDirectory)/$(Build.Repository.Name)"
      includeRootFolder: false
      archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.Repository.Name).zip"
      verbose: true
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))

  - powershell: |
      $vartosplit = "$(Build.Repository.Name)"
      Write-Output $vartosplit 
      $orgname,$reponame =$vartosplit.split('/')[0,1]
      Write-Output $orgname
      Write-Output $reponame
      $URI = New-Object System.Uri("http://40.77.108.147:8081/repository/agent/kapownew/$(json.versionnumber)/$reponame.zip")  
      $SOURCE = "$(Build.ArtifactStagingDirectory)/$(Build.Repository.Name).zip"  
      $AF_USER = "admin"  
      $AF_PWD = ConvertTo-SecureString "Ravikiran@123" -AsPlainText -Force  
      $CREDS = New-Object System.Management.Automation.PSCredential ($AF_USER, $AF_PWD)  

      Invoke-WebRequest -Uri $URI -InFile $SOURCE -Method Put -Credential $CREDS
    displayName: "PowerShell Script"
    condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'dev'))

  #trigger:
  #- dev

  - script: |
      echo "hello this is form a dev branch and contains tasks for dev branch- first task"
      echo $(apiendpoint)
    displayName: "Command Line Script1"

  - script: |
      echo "hello this is form a dev branch and contains tasks for dev branch- second task"
      echo $(apiendpoint)
    displayName: "Command Line Script2"
